UPDATE
  books
SET
  books.primary_author = authors.name
FROM
  books
INNER JOIN
  authors
ON
  books.author_id = authors.id 
WHERE
  books.title = 'The Hobbit'


-- Database: test

-- DROP DATABASE test;

CREATE DATABASE test
    WITH 
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'C'
    LC_CTYPE = 'C'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1;
	
	
	
	CREATE TABLE examples(
	
		example_id SERIAL PRIMARY KEY,
		first_name VARCHAR(30),
		last_name VARCHAR(30)
		
	);
	
	SELECT * FROM examples;
	
	alter table examples 
	add column
	email VARCHAR(30) UNIQUE NOT NULL;
	
	
	alter table examples 
	add column
	nationality varchar(50),
	add column age int not null;
	
	alter table examples
	alter column nationality type char(5);
	
	alter table examples
	alter column last_name type varchar(50),
	alter column email type varchar(80);
	
	--precision and storage for the numeric args
	create table practice(
		id SERIAL PRIMARY KEY,
		product_name varchar(50),
		product_price numeric(4,2)
	);
	
	select * from practice;
	
	create table owners_pets(
		id SERIAL PRIMARY KEY,
		first_name varchar(30),
		last_name varchar(40),
		city varchar(30),
		state character(2)
	);
	
	create table pets(
		id SERIAL PRIMARY KEY,
		species varchar(30),
		fullname varchar(30),
		age int,
		owner_id int references owners_pets(id)
	);
	
	alter table owners_pets
	add column email varchar(50);
	
	alter table owners_pets
	alter column last_name type varchar(50);
	
	select * from owners_pets;
	select * from pets;
	
	select * from examples;
	
	insert into examples (first_name, last_name, email, nationality, age)
	values ('eric', 'lima', 'ericjlima@gmail.com', 'portu', 30);
	
	
	insert into examples (first_name, last_name, email, nationality, age)
	values ('alison', 'badperson', 'AImBad@gmail.com', 'japan', 24),
           ('eric2', 'lima2', 'ericjlima2@gmail.com', 'pxtu', 30),
		   ('teo', 'theodor', 'freewinz2019@gmail.com', 'romai', 33),
		   ('patrick', 'mccannie', 'pmac@gmail.com', 'irish', 32),
		   ('pgibler', 'giblaz', 'giblaz@gmail.com', 'what', 32);

/* 
Insert data into directors table
*/


UPDATE from examples set email='derp@gmail.com' where example_id = 1;
DELETE from examples where example_id = 2;


--Below queries were taken from a resources.rtf provided in the video
INSERT INTO DIRECTORS (first_name, last_name, date_of_birth, nationality) VALUES ('Tomas','Alfredson','1965-04-01','Swedish'),
('Paul','Anderson','1970-06-26','American'),
('Wes','Anderson','1969-05-01','American'),
('Richard','Ayoade','1977-06-12','British'),
('Robert','Zemeckis','1952-05-14','American'),
('Yimou','Zhang','1950-04-02','Chinese');



INSERT INTO actors (first_name, last_name, gender, date_of_birth) VALUES ('Malin','Akerman','F','1978-05-12'),
('Tim','Allen','M','1953-06-13'),
('Julie','Andrews','F','1935-10-01'),
('Ivana','Baquero','F','1994-06-11'),
('Lorraine','Bracco','F','1954-10-02'),
('Sean','Young','F','1959-11-20'),
('Billy','Zane','M','1966-02-24'),
('Ziyi','Zhang','F','1979-02-09');


INSERT INTO movies (movie_name, movie_length, movie_lang, release_date, age_certificate, director_id) VALUES ('A Clockwork Orange','112','English','1972-02-02','18','13'),
('Apocalypse Now','168','English','1979-08-15','15','9'),
('Battle Royale ','111','Japanese','2001-01-04','18','10'),
('Blade Runner ','121','English','1982-06-25','15','27'),
('Chungking Express','113','Chinese','1996-08-03','15','35'),
('Watchmen','138','English','2009-03-06','12','29'),
('Way of the Dragon ','99','Chinese','1972-06-01','12','16');


INSERT INTO movie_revenues (revenue_id, movie_id, domestic_takings, international_takings) VALUES ('1','45','22.2','1.3'),
('2','13','199.4','201.2'),
('3','23','102.1',null),
('4','44','158.7',null),
('6','1','27.1',null),
('7','53',null,null),
('17','18','260.3','210.9'),
('50','22','124.9','484.1'),
('52','15','59.3','115.5'),
('53','47','54.5','104.7');


INSERT INTO movies_actors (actor_id, movie_id) VALUES ('1','52'),
('2','50'),
('3','23'),
('4','26'),
('145','4'),
('146','48'),
('147','9'),
('147','16');



	
	select * from owners_pets;
	
	insert into owners_pets (first_name, last_name, city, state, email)
	values('samuel', 'smith', 'boston', 'ma', 'samsmith@gmail.com'),
	      ('emma', 'johnson', 'seattle', 'wa', 'emjohnson@gmail.com'),
		  ('john', 'oliver', 'newyork', 'ny', 'johnoliver@gmail.com'),
		  ('olivia', 'brown', 'sanfranscio', 'ca', 'oliviabrown@gmail.com'),
		  ('simon', 'smith', 'dallas', 'tx', 'sismith@gmail.com'),
		  (null, 'maxwell', null, 'ca', 'lordmaxwell@gmail.com');
		  
    select * from pets;
	
	insert into pets (species, fullname, age, owner_id)
	values('dog', 'rex', 6, 1),
		  ('rabbit', 'fluffy', 2, 5),
		  ('cat', 'tom', 8, 2),
		  ('mouse', 'jerry', 2, 2),
		  ('dog', 'biggies', 4, 1),
		  ('tortoise', 'squirtle', 43, 3);
		  
   update pets set age=3 where fullname='fluffy';
   
   delete from owners_pets where last_name='maxwell';


-- Database: movies_data

SELECT * FROM directors;

SELECT first_name FROM directors;

SELECT first_name, last_name FROM directors;

SELECT first_name, last_name, nationality FROM directors;

SELECT * FROM movies WHERE age_certificate = '15';

SELECT * FROM movies WHERE age_certificate = '15' AND movie_lang = 'Chinese';

SELECT * FROM movies WHERE age_certificate = '15' OR movie_lang = 'Chinese';

SELECT * FROM movies WHERE age_certificate = '15' 
AND movie_lang = 'English' 
AND director_id='27';

SELECT movie_name, movie_length FROM movies
WHERE movie_length >= '120';

SELECT * FROM movies
WHERE release_date > '1999-12-31';

SELECT * FROM movies
WHERE movie_lang > 'English';

SELECT movie_name, release_date FROM movies;

SELECT first_name, last_name FROM directors
WHERE nationality = 'American';

SELECT * FROM actors
WHERE gender = 'M'
AND date_of_birth > '01-01-1970';

SELECT movie_name from movies
WHERE movie_length > '90'
AND movie_lang = 'English';

SELECT first_name, last_name FROM actors
WHERE first_name = 'Bruce';

--IN means = but with multiple paramaters so don't have to repeat && with repeat words a bunch

SELECT first_name, last_name FROM actors
WHERE first_name IN ('Bruce', 'John');

SELECT first_name, last_name FROM actors
WHERE first_name IN ('Bruce', 'John','Peter');

SELECT first_name, last_name FROM actors
WHERE first_name NOT IN ('Bruce', 'John','Peter');


SELECT actor_id, first_name, last_name FROM actors
WHERE actor_id IN (2,3,4,5,6,8);

SELECT actor_id, first_name, last_name FROM actors
WHERE actor_id NOT IN (2,3,4,5,6,8);

-- USING LIKE with % and _


--look for a P and any characters following that
SELECT * from actors
WHERE first_name LIKE 'P%';

--same as above but only looking for exactly one character followig
SELECT * from actors
WHERE first_name LIKE 'Pe_';

--characters preceeding
SELECT * from actors
WHERE first_name LIKE '%r';

--any first_name that contains an r
SELECT * from actors
WHERE first_name LIKE '%r';

--returns carla from db
SELECT * from actors
WHERE first_name LIKE '__rl_';

SELECT movie_name, release_date FROM movies
WHERE release_date BETWEEN '1995-01-01' AND '1999-12-31';

SELECT movie_name, release_date FROM movies
WHERE movie_length BETWEEN 90 AND 120;

--Doesn't have portuguese movies
SELECT movie_name, movie_lang FROM movies
WHERE movie_lang BETWEEN 'E' AND 'P';

--Has portuguese movies
SELECT movie_name, movie_lang FROM movies
WHERE movie_lang BETWEEN 'E' AND 'Portuguese';

--Doesn't have English movies
SELECT movie_name, movie_lang FROM movies
WHERE movie_lang BETWEEN 'E' AND 'Portuguese';

SELECT movie_name, movie_lang FROM movies
WHERE movie_lang IN ('English', 'Spanish', 'Korean');

--select where actors name begins with M and is born between the dates
SELECT first_name, last_name FROM actors
WHERE first_name LIKE 'M%' 
AND date_of_birth BETWEEN '01-01-1940' AND '12-31-1969';

--select people who have nationality of british french german between the dates of births
SELECT first_name, last_name FROM directors
WHERE nationality IN ('British', 'French', 'German')
AND date_of_birth BETWEEN '01-01-1950' AND '12-31-1980';

SELECT first_name, last_name, date_of_birth FROM actors
ORDER BY first_name;

--desending order of firstname
SELECT first_name, last_name, date_of_birth FROM actors
ORDER BY first_name DESC;

--ordered opposite of above ascending
SELECT first_name, last_name, date_of_birth FROM actors
ORDER BY first_name ASC;

SELECT actor_id, first_name, last_name, date_of_birth FROM actors
ORDER BY actor_id;

SELECT actor_id, first_name, last_name, date_of_birth FROM actors
ORDER BY date_of_birth;


--SELECT * FROM movie_revenues;

INSERT INTO movie_revenues (revenue_id, movie_id, domestic_takings, international_takings) VALUES ('1','45','22.2','1.3'),
('2','13','199.4','201.2'),
...
('52','15','59.3','115.5'),
('53','47','54.5','104.7');

SELECT * FROM movie_revenues
ORDER BY domestic_takings
LIMIT 3;



-- Database: movies_data

-- DROP DATABASE movies_data;

CREATE DATABASE movies_data
    WITH 
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'C'
    LC_CTYPE = 'C'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1;
	
	
	
select * from actors where date_of_birth IS NULL;
	
select * from actors where date_of_birth IS NOT NULL;

select * from movie_revenues
where domestic_takings is not null
order by domestic_takings desc;


--replaces last_name from being the column title to surname to be the column title
select last_name as surname from directors;

--errors because surname doesnt' replaces last_name value but only returns the data query differently
select last_name as surname from directors
where surname = 'Anderson';

--allows surname for order by. This is because where clause is run first, then select is run, and final thing is order by.
select last_name as surname from directors
where last_name LIKE 'A%'
order by surname;

--concatonated two strings together
SELECT 'concat' || 'together' AS new_string;
SELECT 'concat' || ' ' || 'together' AS new_string;

SELECT CONCAT(first_name, last_name) AS full_name FROM actors;

SELECT CONCAT(first_name, ':', last_name) AS full_name FROM actors;

SELECT CONCAT_WS(', ', first_name, last_name, date_of_birth) AS full_name FROM actors;


--top 3 movies with highest international takings
SELECT * FROM movie_revenues
where international_takings is not null
ORDER BY international_takings desc
LIMIT 3;

--concat first_name and last name from directors and rename column to fullname
SELECT CONCAT_WS(' ', first_name, last_name) as full_name FROM directors;

--the actors where firstname or date of birth is null
SELECT * from actors
where first_name is null
or date_of_birth is null;


--aggregate function. Adds up all the rows for a specific select
select count(*) from movie_revenues;

--returns a lesser number because of null values in the specified select column
select count(international_takings) from movie_revenues;

select count(*) from movies
where movie_lang = 'English';

select sum(domestic_takings) from movie_revenues
where domestic_takings > 100.0;

select sum(movie_length) from movies
where movie_lang = 'Chinese';

--errors. we can't do this on anything besides a number.
select sum(movie_name) from movies;


select max(movie_length) from movies;
select min(movie_length) from movies;

select min(movie_length) from movies
where movie_lang = 'Japanese';

--selects the last/latest release_date from the movies table
select max(release_date) from movies;

--select the oldest release_date
select min(release_date) from movies;

--selects the movie name thats is towards the end of the alphabetical order in the list
select max(movie_name) from movies;

--returns a numeric despite all values being integers
select avg(movie_length) from movies;

select avg(movie_length) from movies
where age_certificate = '18';

select count(*) from actors
where date_of_birth > '01-01-1970';

select max(domestic_takings) from movie_revenues;
select min(domestic_takings) from movie_revenues;

select sum(movie_length) from movies
where age_certificate = '15';

select count(*) from directors
where nationality = 'Japanese';

select avg(movie_length) from movies
where movie_lang = 'Chinese';

--shows two columns. One for movie_lang and one for the count of movie_langs. This is how we can group data by a certain column
select movie_lang, count(movie_lang) from movies
group by movie_lang;

select movie_lang, avg(movie_length) from movies
group by movie_lang;

--returns distrinct variations between the two selected columns and has a avg movie length for each
select movie_lang, age_certificate, avg(movie_length) from movies
group by movie_lang, age_certificate;

select movie_lang, age_certificate, avg(movie_length) from movies
where movie_length > 120
group by movie_lang, age_certificate;

--every row where age = 15 give the min and max length
select movie_lang, min(movie_length), max(movie_length) from movies
where age_certificate = '15'
group by movie_lang;

--having is used as where but for aggregate functions return values. where would give an error here.
select movie_lang, count(movie_lang) from movies
group by movie_lang
having count(movie_lang) > 1;

select movie_lang, count(movie_lang) from movies
where movie_length > 120
group by movie_lang
having count(movie_lang) > 1;

select nationality, count(nationality) from directors
group by nationality;

select movie_length, age_certificate, sum(movie_length) from movies
group by movie_length, age_certificate;


--quiz return the movie languages which have a sum total movie length of over 500 minutes.
select movie_lang, sum(movie_length) from movies
group by movie_lang
having sum(movie_length) > 500;


--mathematical operators
select 5 + 6 as addition;
select 8 - 3 as subtraction;
select 30 / 3 as division;
select 4 * 6 as multiplicatoin;

--returns the integer 11 not a numeric
select 35 / 3 as division;

--returns the remainder, 3.
select 15 % 4 as modulous;

--returns two columns, movie_id and total_takings (other two added) - careful as if either is null their addition will be null
select movie_id, (domestic_takings + international_takings) as total_takings from movie_revenues;







--this is a junction table to provide many to many relationship
select * from movies_actors;

/*QUIZ:
what type of relationship is there between pets and owners table?
a: one owner to many pets based on the table structure. an owner can have many pets but a pet can only have one owner based on table structure.

we make a new table called addresses to go with the owners table. what type of relationship is this?
--I think this can be a many to many with a junction table since there is no foreign key in their example. yep. it can get this complex but it could also be one to one..

in a spotify database, there's songs, playlists, and users tables. What's the relationship types between these tables?
playlists->users = many playlists to one user
songs->playists = many to many
/*

	
 /* inner join returns the data of the first table and the second but only for id that the left table shares with the right table*/<br />
<img src="https://i.imgur.com/tMuEFY5.png" /><br /><br />

/*left join returns the data of the first table and the second table but will show blanks for any id that the left table has that the right table doesn't*/<br />
<img src="https://i.imgur.com/CBjw41f.png" /><br /><br />

/*right join returns are opposite of left joins*/<br />
<img src="https://i.imgur.com/5crhzMQ.png" /><br />

/*full joins are like both a left join and a right join. They return every row from both tables but show null values for table-ids that don't match(primary and foreign)*/<br />
<img src="https://i.imgur.com/H0Nwppt.png" /><br />
 
--innerjoins part1

/*
SELECT table1.column1, table1.column2, table2.column1 FROM table1
INNER JOIN table2 ON table1.column3 = table2.column3;
*/

--Think of a ven diagram for left, right and inner joins

SELECT * FROM directors;

INSERT INTO directors (first_name, last_name, date_of_birth, nationality)
VALUES ('Christopher', 'Nolan', '1970-07-30', 'British');


SELECT directors.director_id, directors.first_name, directors.last_name, movies.movie_name
FROM directors
INNER JOIN movies ON directors.director_id = movies.director_id;


SELECT directors.director_id, directors.first_name, directors.last_name, movies.movie_name
FROM directors
INNER JOIN movies ON directors.director_id = movies.director_id
WHERE movies.movie_lang = 'Japanese'
ORDER BY movies.movie_length;

--inner joins don't care which table is table 2 or table 2 so the above query we can swap directors and movies.
--inner join can default to just join since it's the most common type of query in sql


--short hand way of writing the above query
SELECT d.director_id, d.first_name, d.last_name, m.movie_name
FROM directors d
JOIN movies m ON d.director_id = m.director_id
WHERE m.movie_lang = 'Japanese'
ORDER BY m.movie_length;


SELECT mo.movie_name, mr.domestic_takings, mr.international_takings FROM movies mo
JOIN movie_revenues mr ON mo.movie_id = mr.movie_id
ORDER BY mr.domestic_takings;

-- INNER JOINS : PART 3

-- ONLY WHEN THE JOINING COLUMS HAVE THE SAME NAME !

/*
SELECT t1.column1, t1.column2, t2.column1 FROM table1 t1
JOIN table2 t2 USING (column3);
*/

SELECT mo.movie_name, mr.domestic_takings FROM movies mo
JOIN movie_revenues mr USING (movie_id)
WHERE mo.age_certificate IN ('12','15','18')
ORDER BY mr.domestic_takings DESC;

--QUIZ

--1. Select the directors first and last names, the movie names, and release dates for all chinese, korean, and Japanese movies.
SELECT d.first_name, d.last_name, m.movie_name, m.release_date
FROM directors d
JOIN movies m ON d.director_id = m.director_id
WHERE m.movie_lang IN ('Japanese', 'Korean', 'Chinese');
--WHERE m.movie_lang = 'Japanese' OR m.movie_lang = 'Chinese' OR m.movie_lang = 'Korean';
--above where was wrong. Should hacve used WHERE m.movie_lang IN ('Chinese', 'Korean', Japanese); isntead of  WHERE m.movie_lang = 'Japanese' OR m.movie_lang = 'Chinese' OR m.movie_lang = 'Korean';

SELECT mo.movie_name, mo.release_date, mr.international_takings
FROM movies mo
JOIN movie_revenues mr ON mo.movie_id = mr.movie_id
WHERE mo.movie_lang = 'English';

SELECT mo.movie_name, mr.domestic_takings, mr.international_takings
FROM movies mo
JOIN movie_revenues mr ON mo.movie_id = mr.movie_id
WHERE mr.domestic_takings IS NULL OR mr.international_takings IS NULL
ORDER BY mo.movie_name;
--Slightly wrong didn't need FULL JOIN. Still worked though.



--LEFT JOINS

/*
SELECT t1.column1, t1.column2, t2.column1 FROM table1 t1
LEFT JOIN table2 t2 on t1.column3 = t2.column3;
*/


--returns even Christopher Nolan (the guy inserted who has no data in the movies table )
SELECT d.director_id, d.first_name, d.last_name, mo.movie_name FROM directors d
LEFT JOIN movies mo ON d.director_id = mo.director_id;

--doesn't return Christopher Nolan
SELECT d.director_id, d.first_name, d.last_name, mo.movie_name FROM directors d
RIGHT JOIN movies mo ON d.director_id = mo.director_id;

--returns christopher Nolan
SELECT d.director_id, d.first_name, d.last_name, mo.movie_name FROM movies mo
RIGHT JOIN directors d ON d.director_id = mo.director_id;

--arbitraty where clause
SELECT d.director_id, d.first_name, d.last_name, mo.movie_name FROM movies mo
RIGHT JOIN directors d ON d.director_id = mo.director_id
WHERE mo.age_certificate = '18';

-- FULL OUTER JOINS
/*
SELECT t1.column1, t1.column2, t2.column1 FROM table1 t1
FULL JOIN table2 t2 ON t1.column3 = t2.column3;
*/

--returns everyone + Christopher Nolan the below syntax is no different if you swap table 1 and table 2
SELECT d.director_id, d.first_name, d.last_name, mo.movie_name FROM movies mo
FULL JOIN directors d ON d.director_id = mo.director_id;

--arbitraty where clause
SELECT d.director_id, d.first_name, d.last_name, mo.movie_name FROM movies mo
FULL JOIN directors d ON d.director_id = mo.director_id
WHERE mo.age_certificate IN ('15','18')
ORDER BY d.last_name;

--QUIZ

--1. USE a left join to select the first and last names of all British directors and the names and age certificates of the movies that they directed.
SELECT d.first_name, d.last_name, mo.movie_name, mo.age_certificate FROM directors d
LEFT JOIN movies mo ON d.director_id = mo.director_id
WHERE d.nationality = 'British';

--2. Count the number of movies that each directors has directed.
select d.first_name, d.last_name, count(mo.movie_id) from directors d
JOIN movies mo ON d.director_id = mo.director_id
group by d.first_name, d.last_name;
--slightly wrong should have been a left join to get all the directors..



--JOINING MORE THAN TWO TABLES

/*
SELECT t1.column, t2.column, t3.column FROM table t1
JOIN table2 t2 ON t1.column = t2.column
JOIN table3 t3 ON t3.column = t2.column
*/

SELECT d.first_name, d.last_name, mo.movie_name, mr.international_takings, mr.domestic_takings
FROM directors d
JOIN movies mo ON d.director_id = mo.director_id
JOIN movie_revenues mr ON mr.movie_id = mo.movie_id;

SELECT ac.first_name, ac.last_name, mo.movie_name FROM actors ac
JOIN movies_actors ma ON ac.actor_id = ma.actor_id
JOIN movies mo ON mo.movie_id = ma.movie_id;

SELECT ac.first_name, ac.last_name, mo.movie_name FROM actors ac
JOIN movies_actors ma ON ac.actor_id = ma.actor_id
JOIN movies mo ON mo.movie_id = ma.movie_id
WHERE mo.movie_lang = 'English';




